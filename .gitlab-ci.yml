stages:
    - versioning
    - build
    - assemble
    - docker
    - deploy

.fetch_ci_scripts: &fetch_ci_scripts
    - export SCRIPTS_DIR=$(mktemp -d)
    - git clone -q --depth 1 --single-branch --branch $CI_SCRIPTS_BRANCH "$SCRIPTS_REPO" "$SCRIPTS_DIR"
    - chmod -R +x $SCRIPTS_DIR

.gradle_template: &gradle_template
    image: gradle:6.1
    tags:
        - sidesman2
    variables:
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    cache:
        key: "$CI_COMMIT_REF_NAME"
        policy: push
        paths:
            - build
            - .gradle
    artifacts:
        paths:
            - build/libs/*.jar
        expire_in: 1 hour
    except:
        variables:
            - $CI_COMMIT_BRANCH == "deploy"

.get_version_template: &get_version_template
    image: registry.gitlab.com/marco_fv/ci-scripts:groovy
    before_script:
        - *fetch_ci_scripts
    artifacts:
        paths:
            - version
        expire_in: 1 week

.deploy_template: &deploy_template
    stage: deploy
    image: registry.gitlab.com/marco_fv/ci-scripts:groovy
    tags:
        - sidesman2
    dependencies:
        - get-version:hash
        - get-version:semantic:push
        - build:docker
    before_script:
        - *fetch_ci_scripts
    script:
        - groovy -cp $SCRIPTS_DIR/groovy $SCRIPTS_DIR/groovy/uploadAndDeploy.groovy
    when: manual
    only:
        - branches

get-version:hash:
    stage: versioning
    <<: *get_version_template
    script:
        - groovy -cp $SCRIPTS_DIR/groovy $SCRIPTS_DIR/groovy/getHashVersion.groovy
    only:
        - branches
    except:
        refs:
            - master
            - development
        variables:
            - $CI_COMMIT_BRANCH == "deploy"

get-version:semantic:push:
    stage: versioning
    <<: *get_version_template
    script:
        - groovy -cp $SCRIPTS_DIR/groovy $SCRIPTS_DIR/groovy/getSemanticPushVersion.groovy
    only:
        - master
        - development

get-version:semantic:merge_request:
    stage: versioning
    <<: *get_version_template
    script:
        - groovy -cp $SCRIPTS_DIR/groovy $SCRIPTS_DIR/groovy/getSemanticVersion.groovy
    only:
        - merge_requests

build:frontend:
    stage: build
    image: gradle:6.1
    tags:
        - sidesman2
    script:
        - gradle --build-cache buildAndCopyClientResources
    artifacts:
        paths:
            - server/build/resources/client/static
        expire_in: 1 day
    cache:
        paths:
            - node_modules/
    only:
        - branches
    except:
        variables:
            - $CI_COMMIT_BRANCH == "deploy"

assemble:jar:
    stage: assemble
    <<: *gradle_template
    dependencies:
        - build:frontend
    script:
        - gradle --build-cache :server:shadowJar
    artifacts:
        paths:
            - server/build/libs/*.jar
        expire_in: 1 week
    only:
        - branches

build:docker:
    stage: docker
    image: registry.gitlab.com/marco_fv/ci-scripts:docker
    services:
        - docker:dind
    dependencies:
        - assemble:jar
        - get-version:hash
        - get-version:semantic:push
    artifacts:
        paths:
            - server/tar/*.tar
        expire_in: 1 week
    before_script:
        - *fetch_ci_scripts
    script:
        - $SCRIPTS_DIR/shell/docker.sh
    only:
        - branches
    except:
        variables:
            - $CI_COMMIT_BRANCH == "deploy"

deploy:manual:sta:
    <<: *deploy_template
    only:
        - branches
    except:
        - schedules
    variables:
        ENVIRONMENT: sta
    when: manual

deploy:scheduled:sta:
    <<: *deploy_template
    only:
        - schedules
    variables:
        ENVIRONMENT: sta

deploy:manual:prod:
    <<: *deploy_template
    only:
        - branches
    except:
        - schedules
    variables:
        ENVIRONMENT: prod
    when: manual

deploy:scheduled:prod:
    <<: *deploy_template
    only:
        - schedules
    variables:
        ENVIRONMENT: prod
